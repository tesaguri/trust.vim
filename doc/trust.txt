*trust.txt*  A poor imitation of Workspace Trust.

Author: Daiki "tesaguri" Mizukami <tesaguriguma@gmail.com>
License: Apache-2.0 OR MIT

See `LICENSE-APECHE` and `LICENSE-MIT` files distributed with the plugin for
the exact license terms.

                           In Neovim, type |gO| to see the table of contents.

==============================================================================
INTRODUCTION                                              *trust-introduction*

`trust.vim` is a plugin that provides utilities for managing "trusted" paths
like in Visual Studio Code's Workspace Trust feature. It also comes with an
integration with Neovim's builtin `vim.lsp` framework, preventing language
servers from running on untrusted workspaces.

==============================================================================
USAGE                                                            *trust-usage*

To get started, add a configuration like the following in your `init.lua`:
>
    local trust = require("trust")
    local expand = vim.fn.expand

    -- List of (dis)trusted directories.
    -- This example trusts directories under `~/workspace`
    -- except for those under `forks` directory:
    trust.allow(expand("~/workspace"))
    trust.deny(expand("~/workspace/forks"))
    trust.allow(expand("~/workspace/forks/some-thirdparty-repo-you-trust")
    -- ...

    -- Settings for Neovim's builtin `vim.lsp` framework follows:
    local trust_lsp = require("trust.lsp")

    -- List of servers that are safe to run in arbitrary directory:
    trust_lsp.safe_servers = { "dhall_lsp_server" }

    -- Call the following function to make `vim.lsp.start_client` respect
    -- the above settings:
    trust_lsp.hook_start_client()
<
Or in `init.vim`:
>
    call trust#allow(expand("~/workspace"))
    call trust#deny(expand("~/workspace/forks"))
    " ...

    call trust#lsp#set_safe_servers(["dhall_lsp_server"])

    call trust#lsp#hook_start_client()
<
Don't want to write new repository in the vimrc each and every time? You can
also store and load the trust database from a directory. First, create the
database files with Ex commands:
>
    :" Mark the current directory as trusted,
    :" temporarily until the editor exits:
    :TrustAllow .
    :" Temporarily mark a directory as distrusted:
    :TrustDeny ./thirdparty
    :" Save the temporary trust database to files. If the argument is omitted,
    :" defaults to `stdpath("data")."/trust"` (Neovim-only):
    :TrustSave ~/.local/share/trust.vim
<
and replace the list of trusted directories in the `init.lua` with the
following:
>
    require("trust").load()

Or in `init.vim`:
>
    call trust#load()
<
If you want to write some trusted directories in the vimrc while keeping
others from it, be sure to write the list of directories _after_ calling the
`load()` function. Otherwise, the function will overwrite the on-memory trust
database with the contents of the files. For example:
>
    local trust = require("trust")
    local expand = vim.fn.expand
    trust.load()

    trust.allow(expand("~/workspace"))
    trust.deny(expand("~/workspace/forks"))
<
==============================================================================
COMMANDS                                                      *trust-commands*

                                                                 *:TrustAllow*
:TrustAllow {path} ..	Marks {path} as trusted.

                                                                  *:TrustDeny*
:TrustDeny {path} ..	Marks {path} as distrusted.

                                                                *:TrustRemove*
:TrustRemove {path} ..	Removes the marker of (dis)trust of {path} if it has
			been marked with |:TrustAllow| or |:TrustDeny|.

:TrustLoad [{base_path}]                                          *:TrustLoad*
			Loads trust statuses from files under {base_path} or
			`stdpath("data")."/trust"` if {base_path} is omitted.

:TrustSave [{base_path}]                                          *:TrustSave*
			Saves the on-memory trust statuses into files under
			{base_path} or `stdpath("data")."/trust"` if
			{base_path} is omitted.

                                                           *:TrustListAllowed*
:TrustListAllowed	Prints the list of paths which have been marked as
			trusted.

                                                            *:TrustListDenied*
:TrustListDenied	Prints the list of paths which have been marked as
			distrusted.

                                                        *:TrustAllowWorkspace*
:TrustAllowWorkspace	Marks the `root_dir` of the last invocation of
			`vim.lsp.start_client`.

==============================================================================
Lua module: trust                                                  *lua-trust*

allow({path})                                                  *trust.allow()*
                Marks a path as trusted.

                Workspaces at the path or its descendants (up to a path
                explicitly marked as distrusted, if any) will be trusted.

                Parameters: ~
                    {path}  string The path to trust.

                Return: ~
                    boolean The original status value of the node before this
                    function is called.

clear()                                                        *trust.clear()*
                Clears the status of (dis)trust of all paths.

deny({path})                                                    *trust.deny()*
                Marks a path as distrusted.

                Workspaces at the path or its descendants (up to a path
                explicitly marked as trusted, if any) will be untrusted.

                Parameters: ~
                    {path}  string The path to distrust.

                Return: ~
                    boolean The original status value of the node before this
                    function is called.

get({path})                                                      *trust.get()*
                Returns the raw trust status of a path.

                Unlike |trust.is_allowed()|, this does not respect the trust
                status of ancestor paths.

                Return: ~
                    boolean|nil `true` if the path is explicitly marked as
                    trusted, `false` if marked as distrusted, `nil` otherwise.

is_allowed({path})                                        *trust.is_allowed()*
                Returns `true` if the path is trusted.

                Parameters: ~
                    {path}  string Path to a workspace.

                Return: ~
                    boolean `true` if the path is trusted, `false` otherwise.

load({base_path})                                               *trust.load()*
                Loads trust statuses from files.

                Overwrites the on-memory trust statuses.

                Parameters: ~
                    {base_path}  string|table|nil String of the path to a
                                 directory containing the status files or a
                                 table with `allow` and `deny` keys, each of
                                 whose value is a string of the path to a
                                 status file. Defaults to
                                 `stdpath("data")."/trust"` (requires Neovim).

remove({path})                                                *trust.remove()*
                Removes the marker of (dis)trust of a path if it has been
                marked with |trust.allow()| or |trust.deny()|.

                Parameters: ~
                    {path}  string The path to unmark.

save({base_path})                                               *trust.save()*
                Saves the on-memory trust statuses into files.

                Parameters: ~
                    {base_path}  string|table|nil String of the path to a
                                 directory to save the status files in or a
                                 table with `allow` and `deny` keys, each of
                                 whose value is a string of the path to save
                                 the status file. Defaults to
                                 `stdpath("data")."/trust"` (requires Neovim).

set({path}, {status})                                            *trust.set()*
                Sets the raw trust status of a path.

                Parameters: ~
                    {path}    string The path to set trust status.
                    {status}  boolean|nil Trust status value. `true` to trust,
                              `false` to distrust, `nil` to unset.

                Return: ~
                    boolean The original status value of the node before this
                    function is called.

workspaces()                                              *trust.workspaces()*
                Returns the list of (dis)trusted workspaces as an array of
                arrays, whose first element is a list of trusted workspaces
                and the second is a list of distrusted workspaces.

                If the trust status is modified between the iterator function
                calls, its return value is unspecified.

                Return: ~
                    table List of (dis)trusted paths.


==============================================================================
Lua module: trust.lsp                                          *lua-trust.lsp*

hook_start_client()                            *trust.lsp.hook_start_client()*
                Overwrites `vim.lsp.start_client` to make it respect the
                workspace trust statuses.

                Return: ~
                    function|nil The old `vim.lsp.start_client` function if it
                    has not been hooked already, `nil` otherwise.

last_root_dir                                        *trust.lsp.last_root_dir*
                The value of `root_dir` config key that were passed in the
                last call of the hooked version of `vim.lsp.start_client` .

safe_servers                                          *trust.lsp.safe_servers*
                Handle of a set of servers that are run regardless of the
                workspace's trust status.

                This is not an ordinary dictionary and you can only inspect
                its content through indexing.

                Examples: >
                local trust_lsp = require("trust.lsp")

                -- Set an individual server:
                trust_lsp.safe_servers.dhall_lsp_server = true

                -- Set multiple servers at once:
                trust_lsp.safe_servers = { "dhall_lsp_server" }

                -- You cannot use `next` on it:
                assert(next(trust_lsp.safe_servers) == nil)
                -- But you can index it by the server name:
                assert(trust_lsp.safe_servers.dhall_lsp_server == true)
                -- or use the `safe_servers_pairs()` iterator function:
                assert(trust_lsp.safe_servers_pairs()() == "dhall_lsp_server")
<

safe_servers_array()                          *trust.lsp.safe_servers_array()*
                Returns the list of |safe_servers| as an array of server name.

                Return: ~
                    table Array of the safe servers' names.

safe_servers_pairs()                          *trust.lsp.safe_servers_pairs()*
                Returns an iterator function that, each time it is called,
                returns the name of a |safe_servers| and `true` .

                Return: ~
                    function An iterator over safe server's names.

 vim:tw=78:ts=8:ft=help:norl:
